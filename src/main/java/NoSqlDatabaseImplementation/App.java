/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package NoSqlDatabaseImplementation;

import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.MongoException;

import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class App {
    public static  String mongoDBUrl ;
    public static  String mongoDbName ;
    public static void main(String[] args) throws SQLException, InterruptedException, IOException {
        mongoDBUrl = args[0];
        mongoDbName = args[1];
//        MongoClient mongoClient = getMongoClient();
//        new Tables(mongoClient,mongoDbName).createTables();// uncomment this line to create tables and then comment it again
//        initializeDB(); // uncomment this line to initialize the database.
//        Process p = Runtime.getRuntime().exec("mongorestore MongoDbDump");

        int numberOfThreads = Integer.parseInt(args[2]);

        ArrayList<Thread> listOfThreads = new ArrayList<>();
        ArrayList<QueryExecuterThread> listOfQueryExecuters = new ArrayList<>();
        QueryExecuterThread.resultArrayList = new ArrayList<>();

        for (int i = 0;i<numberOfThreads;i++){
            QueryExecuterThread.resultArrayList.add(0);
        }
        for (int i =0;i<numberOfThreads;i++){
            listOfQueryExecuters.add(new QueryExecuterThread(getMongoClient(),i,mongoDbName));
        }
        for (int i=0;i<numberOfThreads;i++){
            listOfThreads.add(new Thread(listOfQueryExecuters.get(i)));
        }
        for (Thread t: listOfThreads){
            t.start();
        }
        Thread.sleep(300000);
        for (QueryExecuterThread queryExecuter : listOfQueryExecuters){
            queryExecuter.stopTheThread();
        }
        Thread.sleep(300);
        System.out.println(QueryExecuterThread.resultArrayList);
        System.out.println(QueryExecuterThread.resultArrayList.stream().mapToInt(number->number).sum());


    }


    /**
     * The below code is for initializing the Database.
     */
    private static void initializeDB() {
        NoSqlDatabase noSqlDatabase = new NoSqlDatabase(getMongoClient(),mongoDbName);
        createAccounts(noSqlDatabase);
        createProducts(noSqlDatabase);
        createOrders(noSqlDatabase);
        createReviews(noSqlDatabase);
    }

    private static void createReviews(NoSqlDatabase noSqlDatabase) {
        for ( int i = 1;i<=100000;i++){
            int userNumber = getRandomNumberBetween(1,1000);
            int productNumber =getRandomNumberBetween(1,10000);
            try {
                noSqlDatabase.postReview("user"+userNumber,"pass"+userNumber,productNumber, DBFunctionalities.Rating.values()[ new Random().nextInt(DBFunctionalities.Rating.values().length)],"Some review text by user "+userNumber +" for product "+productNumber);
            } catch (MongoException e) {
                System.out.println(i);
//                System.out.println(e.toString());
            }
        }
    }

    private static void createOrders(NoSqlDatabase noSqlDatabase) {
        for(int i =1;i<=10000;i++){
            int userNumber = getRandomNumberBetween(1,1000);
            try {
                noSqlDatabase.submitOrder("2020-09-13","user"+userNumber,"pass"+userNumber,getRandomOrder());
            }catch (MongoException e){
                e.printStackTrace();
            }
        }
    }

    private static void createProducts(NoSqlDatabase noSqlDatabase) {
        for ( int i = 1;i<=10000;i++){
            try {
                noSqlDatabase.addProduct("product"+i,"desc"+i,i,10000);
            } catch (MongoException e) {
                e.printStackTrace();
            }
        }
    }

    private static void createAccounts(NoSqlDatabase noSqlDatabase) {
        for ( int i = 1;i<=1000;i++){
            try{
                noSqlDatabase.createAccount("user"+i,"pass"+i,"userFName"+i,"userLName"+i);
            }catch (MongoException e){
                e.printStackTrace();
            }
        }
    }


    private static MongoClient getMongoClient() {
        if (mongoDBUrl.equals("localhost")){
            return new MongoClient();// if the server is on localhost
        }else {
            return new MongoClient((new MongoClientURI(mongoDBUrl)));
        }
    }
    private static Map<Integer, Integer> getRandomOrder() {
        Map<Integer,Integer> randomOrderMap = new HashMap<>();
        int numberOfDistinctProducts = getRandomNumberBetween(10,25);
        for (int i=0;i<numberOfDistinctProducts;i++){
            int productNumber = getRandomNumberBetween(1,10000);
            int quantityNumber = getRandomNumberBetween(10,100);
            randomOrderMap.putIfAbsent(productNumber,quantityNumber);
        }
        return randomOrderMap;
    }
    private static int getRandomNumberBetween(int start, int end) {
        return (int)(Math.random() * (end-start) + start);
    }

}
